from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from src.database.models import User, Statistics
from .exercise_generator import ExerciseGenerator

class ExerciseHandler:
    def __init__(self, engine):
        self.engine = engine
        self.generator = ExerciseGenerator()

    async def handle_exercise_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
        keyboard = [
            [
                InlineKeyboardButton("–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ üìù", callback_data='exercise_grammar'),
                InlineKeyboardButton("–õ–µ–∫—Å–∏–∫–∞ üìö", callback_data='exercise_vocabulary')
            ],
            [
                InlineKeyboardButton("–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ üéß", callback_data='exercise_listening'),
                InlineKeyboardButton("–ü–∏—Å—å–º–æ ‚úçÔ∏è", callback_data='exercise_writing')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        exercise_type = query.data.split('_')[1]
        
        with Session(self.engine) as session:
            user = session.query(User).filter_by(telegram_id=query.from_user.id).first()
            exercise = self.generator.get_exercise(exercise_type, user.level)
            
            await query.message.reply_text(
                f"üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:\n\n{exercise['question']}\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç."
            ) 