from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from src.database.models import User
from src.handlers.ai_handler import AIHandler

class LevelTestHandler:
    def __init__(self, engine, ai_handler: AIHandler):
        self.engine = engine
        self.ai = ai_handler
        self.test_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.questions = [
            "What's your name and where are you from?",
            "Tell me about your family.",
            "What do you like to do in your free time?",
            "What did you do yesterday?",
            "What are your plans for the future?",
            "If you could change one thing about your city, what would it be and why?",
            "What's the most interesting book you've read or movie you've seen recently?",
            "Do you think technology makes our lives easier or more complicated? Why?",
            "What would you do if you won a million dollars?",
            "What are the most important challenges facing our world today?"
        ]
        
    async def should_take_test(self, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"""
        return not user.level or user.level in ['Unknown', 'undefined', 'A0']
        
    async def start_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
        self.test_states[user_id] = {
            'current_question': 0,
            'responses': [],
            'scores': [],
            'consecutive_low_scores': 0
        }
        
        await update.message.reply_text(
            "üìù –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
            "–Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. "
            "–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–∏—Ö –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.\n\n"
            "–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–æ –º–æ–∂–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è —Ä–∞–Ω—å—à–µ, "
            "–µ—Å–ª–∏ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ—á–Ω–æ.\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="level_test_start")
            ]])
        )
    
    async def handle_test_interaction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ—Å—Ç–æ–º"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if query.data == "level_test_start":
            await query.message.delete()
            await self._ask_next_question(query.message)
            return
            
    async def handle_test_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞"""
        user_id = update.effective_user.id
        response = update.message.text
        
        if user_id not in self.test_states:
            return
            
        state = self.test_states[user_id]
        state['responses'].append(response)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
        analysis = await self._analyze_response(response)
        state['scores'].append(analysis)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∏–∑–∫–∏–µ –æ—Ü–µ–Ω–∫–∏
        if analysis['level'] in ['A1', 'A2']:
            state['consecutive_low_scores'] += 1
        else:
            state['consecutive_low_scores'] = 0
            
        # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ç–µ—Å—Ç –µ—Å–ª–∏:
        # 1. –ü–æ–ª—É—á–∏–ª–∏ 5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∏–∑–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫
        # 2. –û—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤—Å–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        # 3. –ü–æ–ª—É—á–∏–ª–∏ 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —É—Ä–æ–≤–Ω—è –ø–æ—Å–ª–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
        if (state['consecutive_low_scores'] >= 5 or 
            state['current_question'] >= 9 or 
            (state['current_question'] >= 4 and self._check_consistent_level(state['scores'][-3:]))):
            
            await self._finish_test(update, state)
            return
            
        state['current_question'] += 1
        await self._ask_next_question(update.message)
            
    async def _ask_next_question(self, message):
        """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        user_id = message.chat.id
        question_num = self.test_states[user_id]['current_question']
        
        await message.reply_text(
            f"Question {question_num + 1}:\n\n"
            f"{self.questions[question_num]}\n\n"
            "Please answer in English üá¨üáß"
        )
        
    async def _analyze_response(self, response: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é AI"""
        prompt = f"""As an English language expert, analyze this response:
        "{response}"
        
        Consider:
        1. Grammar accuracy
        2. Vocabulary range
        3. Sentence complexity
        4. Appropriateness of response
        
        Determine the CEFR level (A1-C2) and provide scores.
        
        Return only JSON:
        {{
            "level": "B1",
            "grammar_score": 4,
            "vocabulary_score": 3,
            "complexity_score": 4,
            "overall_score": 3.7
        }}"""
        
        try:
            result = await self.ai.get_response(prompt)
            return eval(result)  # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ json.loads()
        except:
            return {
                "level": "A1",
                "grammar_score": 1,
                "vocabulary_score": 1,
                "complexity_score": 1,
                "overall_score": 1
            }
        
    def _check_consistent_level(self, recent_scores: list) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏"""
        if len(recent_scores) < 3:
            return False
        return all(score['level'] == recent_scores[0]['level'] for score in recent_scores)
        
    async def _finish_test(self, update: Update, state: dict):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
        scores = state['scores']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        if state['consecutive_low_scores'] >= 5:
            final_level = 'A1'
        else:
            # –ë–µ—Ä–µ–º –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            recent_levels = [score['level'] for score in scores[-3:]]
            final_level = max(set(recent_levels), key=recent_levels.count)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_grammar = sum(s['grammar_score'] for s in scores) / len(scores)
        avg_vocab = sum(s['vocabulary_score'] for s in scores) / len(scores)
        avg_complex = sum(s['complexity_score'] for s in scores) / len(scores)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with Session(self.engine) as session:
            user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
            user.level = final_level
            session.commit()
        
        await update.message.reply_text(
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {final_level}\n\n"
            f"üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            f"–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: {'‚≠ê' * round(avg_grammar)}\n"
            f"–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å: {'‚≠ê' * round(avg_vocab)}\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—á–∏: {'‚≠ê' * round(avg_complex)}\n\n"
            f"üí° –ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å {final_level}:\n"
            f"{self._get_level_description(final_level)}\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å! üéØ"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
        del self.test_states[update.effective_user.id]
        
    def _get_level_description(self, level: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        descriptions = {
            'A1': '–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ–º—ã –∏ –ø–æ–Ω–∏–º–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã.',
            'A2': '–≠–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å. –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∂–∏–∑–Ω–∏.',
            'B1': '–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å. –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç–µ–º –∏ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ.',
            'B2': '–í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ. –í—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–æ—Å–∏—Ç–µ–ª—è–º–∏ —è–∑—ã–∫–∞ –∏ –ø–æ–Ω–∏–º–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.',
            'C1': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∑—ã–∫ –≥–∏–±–∫–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.',
            'C2': '–°–≤–æ–±–æ–¥–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ. –í—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –∏ –º–æ–∂–µ—Ç–µ –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ –∏ —Ç–æ—á–Ω–æ.'
        }
        return descriptions.get(level, '–£—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω') 