from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from src.database.models import User
from src.handlers.ai_handler import AIHandler

class LevelTestHandler:
    def __init__(self, engine, ai_handler: AIHandler):
        self.engine = engine
        self.ai = ai_handler
        self.test_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    async def start_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        user_id = update.effective_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
        self.test_states[user_id] = {
            'current_question': 0,
            'responses': [],
            'mistakes': 0
        }
        
        await update.message.reply_text(
            "üìù –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n"
            "–Ø –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º. "
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–∏—Ö –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ.\n\n"
            "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="level_test_start")
            ]])
        )
    
    async def handle_test_interaction(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–µ—Å—Ç–æ–º"""
        query = update.callback_query
        user_id = query.from_user.id
        
        if query.data == "level_test_start":
            await self._ask_next_question(query)
            return
            
    async def handle_test_response(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞"""
        user_id = update.effective_user.id
        response = update.message.text
        
        if user_id not in self.test_states:
            return
            
        state = self.test_states[user_id]
        state['responses'].append(response)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é AI
        analysis = await self._analyze_response(response, state['current_question'])
        
        if analysis['has_mistakes']:
            state['mistakes'] += 1
            
        state['current_question'] += 1
        
        if state['current_question'] >= 5:  # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
            await self._finish_test(update, state)
        else:
            await self._ask_next_question(update)
            
    async def _ask_next_question(self, update):
        """–ó–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å"""
        questions = [
            "Tell me about yourself and your hobbies.",
            "What did you do last weekend?",
            "What are your plans for the future?",
            "If you could travel anywhere, where would you go and why?",
            "What's your opinion about learning foreign languages?"
        ]
        
        user_id = update.effective_user.id if isinstance(update, Update) else update.from_user.id
        question_num = self.test_states[user_id]['current_question']
        
        await update.message.reply_text(f"Question {question_num + 1}/5:\n\n{questions[question_num]}")
        
    async def _analyze_response(self, response: str, question_num: int) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é AI"""
        prompt = f"""Analyze this English response and determine:
        1. CEFR level (A1-C2)
        2. Grammar mistakes
        3. Vocabulary range
        4. Sentence complexity
        
        Response: "{response}"
        
        Return JSON format:
        {{
            "level": "B1",
            "has_mistakes": true/false,
            "grammar_score": 1-5,
            "vocabulary_score": 1-5,
            "complexity_score": 1-5
        }}
        """
        
        result = await self.ai.get_response(prompt)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å—Ç—Ä–æ–∫—É
        return eval(result)  # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å json.loads()
        
    async def _finish_test(self, update: Update, state: dict):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–º–µ—Å—Ç–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        all_responses = "\n".join(state['responses'])
        final_analysis = await self._analyze_response(all_responses, -1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with Session(self.engine) as session:
            user = session.query(User).filter_by(telegram_id=update.effective_user.id).first()
            user.level = final_analysis['level']
            session.commit()
        
        await update.message.reply_text(
            f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {final_analysis['level']}\n\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
            f"–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞: {'‚≠ê' * final_analysis['grammar_score']}\n"
            f"–°–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å: {'‚≠ê' * final_analysis['vocabulary_score']}\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {'‚≠ê' * final_analysis['complexity_score']}\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å! üéØ"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∞
        del self.test_states[update.effective_user.id] 