from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from src.database.models import User, Statistics, Achievement
from ..utils.progress_tracker import ProgressTracker
from ..exercises.generator import ExerciseGenerator
from src.handlers.ai_handler import AIHandler
from src.config import WEBAPP_URL
from src.handlers.level_test_handler import LevelTestHandler

class MessageHandler:
    def __init__(self, engine, ai_handler: AIHandler):
        self.engine = engine
        self.ai = ai_handler
        self.progress_tracker = ProgressTracker()
        self.exercise_generator = ExerciseGenerator()
        self.level_test = LevelTestHandler(engine, ai_handler)
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        self.main_keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("üìö –£—Ä–æ–∫–∏"), KeyboardButton("üéØ –¶–µ–ª–∏")],
                [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True
        )
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.webapp_keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å Web App", web_app=WebAppInfo(url=WEBAPP_URL))]
        ], resize_keyboard=True)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        with Session(self.engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç
                user = User(telegram_id=user_id, level='Unknown')
                session.add(user)
                stats = Statistics(user=user)
                session.add(stats)
                session.commit()
                
                await update.message.reply_text(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n"
                    "–î–∞–≤–∞–π—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!"
                )
                await self.level_test.start_test(update, context)
                return
                
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await update.message.reply_text(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=self.webapp_keyboard
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "/start - –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ\n"
            "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "/exercise - –ù–∞—á–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ª—É—á—à–∏—Ç—å —è–∑—ã–∫!"
        )
        await update.message.reply_text(help_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message = update.message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        if message == "üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è":
            return await self.show_exercises_menu(update, context)
        elif message == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            return await self.show_statistics(update, context)
        elif message == "üìö –£—Ä–æ–∫–∏":
            return await self.show_lessons_menu(update, context)
        elif message == "üéØ –¶–µ–ª–∏":
            return await self.show_goals(update, context)
        elif message == "‚ùì –ü–æ–º–æ—â—å":
            return await self.help_command(update, context)
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI
        with Session(self.engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user:
                user = User(telegram_id=user_id, level='A1')
                session.add(user)
                stats = Statistics(user=user)
                session.add(stats)
            else:
                stats = user.statistics[0]
                stats.messages_count += 1
            
            ai_response = await self.ai.get_response(message, user.level)
            session.commit()
            
            await update.message.reply_text(ai_response, reply_markup=self.main_keyboard)

    async def show_exercises_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ üìù", callback_data='exercise_grammar'),
                InlineKeyboardButton("–õ–µ–∫—Å–∏–∫–∞ üìö", callback_data='exercise_vocabulary')
            ],
            [
                InlineKeyboardButton("–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ üéß", callback_data='exercise_listening'),
                InlineKeyboardButton("–ü–∏—Å—å–º–æ ‚úçÔ∏è", callback_data='exercise_writing')
            ]
        ])
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", reply_markup=keyboard)

    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        
        with Session(self.engine) as session:
            user = session.query(User).filter_by(telegram_id=user_id).first()
            if not user or not user.statistics:
                await update.message.reply_text(
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ!",
                    reply_markup=self.main_keyboard
                )
                return

            stats = user.statistics[0]
            stats_message = (
                "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
                f"üìù –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.messages_count}\n"
                f"‚úçÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—à–∏–±–æ–∫: {stats.corrections_count}\n"
                f"üìö –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {stats.exercises_completed}\n"
                f"üî• –î–Ω–µ–π –ø–æ–¥—Ä—è–¥: {user.streak_days}\n"
                f"üìà –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {user.level}\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
            )
            
            await update.message.reply_text(
                stats_message,
                parse_mode='Markdown',
                reply_markup=self.main_keyboard
            )

    async def show_lessons_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É—Ä–æ–∫–æ–≤"""
        await update.message.reply_text(
            "üîú –£—Ä–æ–∫–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã!",
            reply_markup=self.main_keyboard
        )

    async def show_goals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è"""
        await update.message.reply_text(
            "üîú –°–∏—Å—Ç–µ–º–∞ —Ü–µ–ª–µ–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
            reply_markup=self.main_keyboard
        )

    async def check_achievements(self, user):
        stats = user.statistics[0]
        if stats.messages_count == 1:
            self.award_achievement(user, 'first_message')
        if user.streak_days == 7:
            self.award_achievement(user, 'daily_streak_7')
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

    def award_achievement(self, user, achievement_name):
        if not any(a.name == achievement_name for a in user.achievements):
            achievement = Achievement(user_id=user.id, name=achievement_name)
            session.add(achievement)
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
