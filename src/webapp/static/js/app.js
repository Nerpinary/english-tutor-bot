let tg = window.Telegram.WebApp;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    tg.ready();
    tg.expand();
    
    // –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const urlParams = new URLSearchParams(window.location.search);
    const userId = urlParams.get('user_id') || tg.initDataUnsafe?.user?.id;
    
    if (!userId) {
        console.error('No user ID available');
        showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.');
        return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
    checkUserLevel(userId);
});

// –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
function showError(message) {
    document.querySelector('.container').innerHTML = `
        <div class="error-container">
            <p class="error-message">${message}</p>
        </div>
    `;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserLevel(userId) {
    try {
        const response = await fetch(`/api/user-data?user_id=${userId}`);
        const data = await response.json();
        
        // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ—Å—Ç–∞
        if (!data.level || data.level === 'undefined' || data.level === 'Unknown') {
            showLevelTest();
        } else {
            // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            loadUserData(data);
            showMainInterface();
        }
    } catch (error) {
        console.error('Error checking user level:', error);
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–µ—Å—Ç–∞
function showLevelTest() {
    document.querySelector('.container').innerHTML = `
        <div class="test-container">
            <h2>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ</h2>
            <p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º –∏ —É—Ä–æ–∫–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –≤–ª–∞–¥–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–º —è–∑—ã–∫–æ–º.</p>
            <button class="start-test-btn" onclick="startLevelTest()">–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç</button>
        </div>
    `;
}

// –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
function startLevelTest() {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–æ—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞
    tg.sendData(JSON.stringify({
        action: 'start_level_test'
    }));
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –≤ –±–æ—Ç–µ
    tg.close();
}

// –ü–æ–∫–∞–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function showMainInterface() {
    document.querySelector('.container').style.display = 'block';
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData(data) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    const avatarElement = document.querySelector('.avatar');
    if (data.photo_url) {
        avatarElement.style.backgroundImage = `url(${data.photo_url})`;
        avatarElement.style.backgroundSize = 'cover';
        avatarElement.style.backgroundPosition = 'center';
    } else {
        avatarElement.textContent = data.name.charAt(0).toUpperCase();
        avatarElement.style.backgroundColor = getRandomColor(data.name);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById('username').textContent = data.name;
    document.getElementById('level').textContent = `Level: ${data.level}`;
    document.getElementById('messages-count').textContent = data.messages;
    document.getElementById('exercises-count').textContent = data.exercises;
    document.getElementById('streak-days').textContent = data.streak;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
function getRandomColor(name) {
    let hash = 0;
    for (let i = 0; i < name.length; i++) {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }
    const hue = hash % 360;
    return `hsl(${hue}, 70%, 50%)`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
function showExercises() {
    tg.showPopup({
        title: 'Choose Exercise Type',
        message: 'What would you like to practice?',
        buttons: [
            {id: 'grammar', type: 'default', text: 'üìù Grammar'},
            {id: 'vocabulary', type: 'default', text: 'üìö Vocabulary'},
            {id: 'listening', type: 'default', text: 'üéß Listening'},
            {id: 'writing', type: 'default', text: '‚úçÔ∏è Writing'}
        ]
    });
}

function showLessons() {
    // Implement lessons view
}

function showChat() {
    // Implement chat view
}

function showGoals() {
    // Implement goals view
} 